# Generated by Django 3.1.13 on 2021-07-07 07:02

from django.db import migrations, models
import django.db.models.deletion
import home.blocks
import home.mixins
import messaging.blocks
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailmarkdown.blocks
import wagtailmenus.models.menuitems


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0022_uploadedimage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('allow_comments', models.BooleanField(default=False)),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.CharBlock(form_classname='full title')), ('paragraph', wagtail.blocks.RichTextBlock(features=['h2', 'h3', 'h4', 'bold', 'italic', 'ol', 'ul', 'hr', 'link', 'document-link', 'image'])), ('markdown', wagtailmarkdown.blocks.MarkdownBlock(icon='code')), ('image', wagtail.images.blocks.ImageChooserBlock()), ('list', wagtail.blocks.ListBlock(wagtail.blocks.CharBlock(label='Item'))), ('numbered_list', wagtail.blocks.ListBlock(wagtail.blocks.CharBlock(label='Item'))), ('page_button', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('text', wagtail.blocks.CharBlock(max_length=255, required=False))])), ('embedded_poll', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Poll'])), ('embedded_survey', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Survey'])), ('embedded_quiz', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Quiz'])), ('media', home.blocks.MediaBlock(icon='media')), ('chat_bot', wagtail.blocks.StructBlock([('subject', wagtail.blocks.CharBlock()), ('button_text', wagtail.blocks.CharBlock()), ('trigger_string', wagtail.blocks.CharBlock()), ('channel', messaging.blocks.ChatBotChannelChooserBlock())]))])),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', home.mixins.PageUtilsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ArticleRecommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArticleTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BannerIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='BannerPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('banner_description', wagtail.fields.RichTextField(blank=True, null=True)),
                ('banner_button_text', models.CharField(blank=True, help_text='The title for a button', max_length=35, null=True)),
                ('align_center', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CacheSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache', models.BooleanField(default=True, help_text='check to prompt first time users to download the website as an app', verbose_name='Prompt users to download?')),
            ],
            options={
                'verbose_name': 'Cache settings',
            },
        ),
        migrations.CreateModel(
            name='FeaturedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FooterIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('home_featured_content', wagtail.fields.StreamField([('page_button', wagtail.blocks.StructBlock([('page', wagtail.blocks.PageChooserBlock()), ('text', wagtail.blocks.CharBlock(max_length=255, required=False))])), ('embedded_poll', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Poll'])), ('embedded_survey', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Survey'])), ('embedded_quiz', home.blocks.EmbeddedQuestionnaireChooserBlock(page_type=['questionnaires.Quiz']))], null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HomePageBanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IogtFlatMenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('link_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='link to a custom URL')),
                ('url_append', models.CharField(blank=True, help_text="Use this to optionally append a #hash or querystring to the above page's URL.", max_length=255, verbose_name='append to URL')),
                ('handle', models.CharField(blank=True, help_text='Use this field to optionally specify an additional value for each menu item, which you can then reference in custom menu templates.', max_length=100, verbose_name='handle')),
                ('link_text', models.CharField(blank=True, help_text="Provide the text to use for a custom URL, or set on an internal page link to use instead of the page's title.", max_length=255, verbose_name='link text')),
                ('allow_subnav', models.BooleanField(default=False, help_text="NOTE: The sub-menu might not be displayed, even if checked. It depends on how the menu is used in this project's templates.", verbose_name='allow sub-menu for this item')),
                ('color', models.CharField(blank=True, max_length=6, null=True)),
                ('color_text', models.CharField(blank=True, max_length=6, null=True)),
            ],
            options={
                'verbose_name': 'menu item',
                'verbose_name_plural': 'menu items',
                'ordering': ('sort_order',),
                'abstract': False,
            },
            bases=(models.Model, wagtailmenus.models.menuitems.MenuItem),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('background_color', models.CharField(blank=True, max_length=8, null=True)),
                ('font_color', models.CharField(blank=True, max_length=8, null=True)),
                ('show_progress_bar', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page', home.mixins.PageUtilsMixin),
        ),
        migrations.CreateModel(
            name='SectionIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SectionTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FooterPage',
            fields=[
                ('article_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='home.article')),
            ],
            options={
                'abstract': False,
            },
            bases=('home.article',),
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_only_translated_pages', models.BooleanField(default=False, help_text='When selecting this option, untranslated pages will not be visible to the front end user when viewing a child language of the site')),
                ('fb_analytics_app_id', models.CharField(blank=True, help_text='The tracking ID to be used to view Facebook Analytics', max_length=25, null=True, verbose_name='Facebook Analytics App ID')),
                ('local_ga_tag_manager', models.CharField(blank=True, help_text='Local GA Tag Manager tracking code (e.g GTM-XXX) to be used to view analytics on this site only', max_length=255, null=True, verbose_name='Local GA Tag Manager')),
                ('global_ga_tag_manager', models.CharField(blank=True, help_text='Global GA Tag Manager tracking code (e.g GTM-XXX) to be used to view analytics on more than one site globally', max_length=255, null=True, verbose_name='Global GA Tag Manager')),
                ('local_ga_tracking_code', models.CharField(blank=True, help_text='Local GA tracking code to be used to view analytics on this site only', max_length=255, null=True, verbose_name='Local GA Tracking Code')),
                ('global_ga_tracking_code', models.CharField(blank=True, help_text='Global GA tracking code to be used to view analytics on more than one site globally', max_length=255, null=True, verbose_name='Global GA Tracking Code')),
                ('social_media_link', wagtail.fields.StreamField([('social_media_link', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(max_length=255)), ('link', wagtail.blocks.URLBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())]))], blank=True, null=True)),
                ('social_media_content_sharing_button', wagtail.fields.StreamField([('social_media_content_sharing_button', wagtail.blocks.StructBlock([('platform', wagtail.blocks.CharBlock(max_length=255)), ('is_active', wagtail.blocks.BooleanBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False))]))], blank=True, null=True)),
                ('media_file_size_threshold', models.IntegerField(default=9437184, help_text='Show warning if uploaded media file size is greater than this in bytes. Default is 9 MB')),
                ('allow_anonymous_comment', models.BooleanField(default=False)),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
    ]
