# Generated by Django 3.1.13 on 2021-07-07 07:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import home.blocks
import home.mixins
import modelcluster.fields
import questionnaires.blocks
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0059_apply_collection_ordering'),
    ]

    operations = [
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('thank_you_text', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('media', home.blocks.MediaBlock(icon='media')), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('allow_anonymous_submissions', models.BooleanField(default=True, help_text='Check this to allow users who are NOT logged in to complete surveys.')),
                ('allow_multiple_submissions', models.BooleanField(default=True, help_text='Check this to allow multiple form submissions for users')),
                ('submit_button_text', models.CharField(default='Submit', help_text='Submit button text', max_length=40, null=True)),
                ('direct_display', models.BooleanField(default=False)),
                ('show_results', models.BooleanField(default=True, help_text='This option allows the users to see the results.')),
                ('result_as_percentage', models.BooleanField(default=True, help_text='If not checked, the results will be shown as a total instead of a percentage.')),
            ],
            options={
                'verbose_name': 'Poll',
                'verbose_name_plural': 'Polls',
            },
            bases=('wagtailcore.page', home.mixins.PageUtilsMixin),
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('thank_you_text', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('media', home.blocks.MediaBlock(icon='media')), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('allow_anonymous_submissions', models.BooleanField(default=True, help_text='Check this to allow users who are NOT logged in to complete surveys.')),
                ('allow_multiple_submissions', models.BooleanField(default=True, help_text='Check this to allow multiple form submissions for users')),
                ('submit_button_text', models.CharField(default='Submit', help_text='Submit button text', max_length=40, null=True)),
                ('direct_display', models.BooleanField(default=False)),
                ('multi_step', models.BooleanField(default=False, help_text='Whether to display the survey questions to the user one at a time, instead of all at once.', verbose_name='Multi-step')),
            ],
            options={
                'verbose_name': 'quiz',
                'verbose_name_plural': 'quizzes',
            },
            bases=('wagtailcore.page', home.mixins.PageUtilsMixin),
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('description', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('thank_you_text', wagtail.fields.StreamField([('paragraph', wagtail.blocks.RichTextBlock()), ('media', home.blocks.MediaBlock(icon='media')), ('image', wagtail.images.blocks.ImageChooserBlock())], blank=True, null=True)),
                ('allow_anonymous_submissions', models.BooleanField(default=True, help_text='Check this to allow users who are NOT logged in to complete surveys.')),
                ('allow_multiple_submissions', models.BooleanField(default=True, help_text='Check this to allow multiple form submissions for users')),
                ('submit_button_text', models.CharField(default='Submit', help_text='Submit button text', max_length=40, null=True)),
                ('direct_display', models.BooleanField(default=False)),
                ('multi_step', models.BooleanField(default=False, help_text='Whether to display the survey questions to the user one at a time, instead of all at once.', verbose_name='Multi-step')),
            ],
            options={
                'verbose_name': 'survey',
                'verbose_name_plural': 'surveys',
            },
            bases=('wagtailcore.page', home.mixins.PageUtilsMixin),
        ),
        migrations.CreateModel(
            name='UserSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_data', models.TextField()),
                ('submit_time', models.DateTimeField(auto_now_add=True, verbose_name='submit time')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.page')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'form submission',
                'verbose_name_plural': 'form submissions',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurveyFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('required', models.BooleanField(default=False, verbose_name='required')),
                ('admin_label', models.CharField(help_text='Column header used during CSV export of survey responses.', max_length=256, verbose_name='admin_label')),
                ('skip_logic', questionnaires.blocks.SkipLogicField([('skip_logic', wagtail.blocks.StructBlock([('choice', wagtail.blocks.CharBlock(required=False)), ('skip_logic', wagtail.blocks.ChoiceBlock(choices=[('next', 'Next default question'), ('end', 'End of survey'), ('question', 'Another question')], required=False)), ('question', wagtail.blocks.IntegerBlock(required=False))]))], blank=True, verbose_name='Answer options')),
                ('page_break', models.BooleanField(default=False, help_text='Inserts a page break which puts the next question onto a new page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_form_fields', to='questionnaires.survey')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuizFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('admin_label', models.CharField(help_text='Column header used during CSV export of survey responses.', max_length=256, verbose_name='admin_label')),
                ('skip_logic', questionnaires.blocks.SkipLogicField([('skip_logic', wagtail.blocks.StructBlock([('choice', wagtail.blocks.CharBlock(required=False)), ('skip_logic', wagtail.blocks.ChoiceBlock(choices=[('next', 'Next default question'), ('end', 'End of survey'), ('question', 'Another question')], required=False)), ('question', wagtail.blocks.IntegerBlock(required=False))]))], blank=True, verbose_name='Answer options')),
                ('page_break', models.BooleanField(default=False, help_text='Inserts a page break which puts the next question onto a new page')),
                ('correct_answer', models.CharField(help_text='Please provide correct answer for this question', max_length=256, verbose_name='correct_answer')),
                ('feedback', models.CharField(blank=True, help_text='Feedback message for user answer.', max_length=255, null=True, verbose_name='Feedback')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_form_fields', to='questionnaires.quiz')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('field_type', models.CharField(choices=[('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons')], max_length=16, verbose_name='field type')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='poll_form_fields', to='questionnaires.poll')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
